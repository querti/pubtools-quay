{"payloadType":"application/vnd.in-toto+json","payload":"{"_type":"https://in-toto.io/Statement/v0.1","predicateType":"https://cosign.sigstore.dev/attestation/v1","subject":[{"name":"quay.io/lgallovi-test/fedora-arch-test","digest":{"sha256":"151ebc7d4b84ce7d4979ac14217a20acccae599e837b917223695e907bef5758"}}],"predicate":{"Data":"{\n    \"bomFormat\": \"CycloneDX\",\n    \"components\": [\n        {\n            \"build_dependency\": false,\n            \"name\": \"acl\",\n            \"purl\": \"pkg:rpm/acl@2.2.53-1.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"2.2.53-1.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"audit-libs\",\n            \"purl\": \"pkg:rpm/audit-libs@3.0-0.17.20191104git1c2f876.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"3.0-0.17.20191104git1c2f876.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"basesystem\",\n            \"purl\": \"pkg:rpm/basesystem@11-5.el8?arch=noarch\",\n            \"type\": \"library\",\n            \"version\": \"11-5.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"bash\",\n            \"purl\": \"pkg:rpm/bash@4.4.19-10.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"4.4.19-10.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"brotli\",\n            \"purl\": \"pkg:rpm/brotli@1.0.6-1.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"1.0.6-1.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"bzip2-libs\",\n            \"purl\": \"pkg:rpm/bzip2-libs@1.0.6-26.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"1.0.6-26.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"ca-certificates\",\n            \"purl\": \"pkg:rpm/ca-certificates@2020.2.41-80.0.el8_2?arch=noarch\",\n            \"type\": \"library\",\n            \"version\": \"2020.2.41-80.0.el8_2\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"chkconfig\",\n            \"purl\": \"pkg:rpm/chkconfig@1.11-1.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"1.11-1.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"coreutils-single\",\n            \"purl\": \"pkg:rpm/coreutils-single@8.30-7.el8_2.1?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"8.30-7.el8_2.1\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"cracklib\",\n            \"purl\": \"pkg:rpm/cracklib@2.9.6-15.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"2.9.6-15.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"crypto-policies\",\n            \"purl\": \"pkg:rpm/crypto-policies@20191128-2.git23e1bf1.el8?arch=noarch\",\n            \"type\": \"library\",\n            \"version\": \"20191128-2.git23e1bf1.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"cryptsetup-libs\",\n            \"purl\": \"pkg:rpm/cryptsetup-libs@2.2.2-1.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"2.2.2-1.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"curl\",\n            \"purl\": \"pkg:rpm/curl@7.61.1-12.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"7.61.1-12.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"cyrus-sasl-lib\",\n            \"purl\": \"pkg:rpm/cyrus-sasl-lib@2.1.27-1.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"2.1.27-1.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"dbus-common\",\n            \"purl\": \"pkg:rpm/dbus-common@1.12.8-10.el8_2?arch=noarch\u0026epoch=1\",\n            \"type\": \"library\",\n            \"version\": \"1.12.8-10.el8_2\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"dbus-daemon\",\n            \"purl\": \"pkg:rpm/dbus-daemon@1.12.8-10.el8_2?arch=ppc64le\u0026epoch=1\",\n            \"type\": \"library\",\n            \"version\": \"1.12.8-10.el8_2\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"dbus-glib\",\n            \"purl\": \"pkg:rpm/dbus-glib@0.110-2.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"0.110-2.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"dbus-libs\",\n            \"purl\": \"pkg:rpm/dbus-libs@1.12.8-10.el8_2?arch=ppc64le\u0026epoch=1\",\n            \"type\": \"library\",\n            \"version\": \"1.12.8-10.el8_2\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"dbus-tools\",\n            \"purl\": \"pkg:rpm/dbus-tools@1.12.8-10.el8_2?arch=ppc64le\u0026epoch=1\",\n            \"type\": \"library\",\n            \"version\": \"1.12.8-10.el8_2\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"dbus\",\n            \"purl\": \"pkg:rpm/dbus@1.12.8-10.el8_2?arch=ppc64le\u0026epoch=1\",\n            \"type\": \"library\",\n            \"version\": \"1.12.8-10.el8_2\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"device-mapper-libs\",\n            \"purl\": \"pkg:rpm/device-mapper-libs@1.02.169-3.el8?arch=ppc64le\u0026epoch=8\",\n            \"type\": \"library\",\n            \"version\": \"1.02.169-3.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"device-mapper\",\n            \"purl\": \"pkg:rpm/device-mapper@1.02.169-3.el8?arch=ppc64le\u0026epoch=8\",\n            \"type\": \"library\",\n            \"version\": \"1.02.169-3.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"dnf-data\",\n            \"purl\": \"pkg:rpm/dnf-data@4.2.17-7.el8_2?arch=noarch\",\n            \"type\": \"library\",\n            \"version\": \"4.2.17-7.el8_2\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"dnf-plugin-subscription-manager\",\n            \"purl\": \"pkg:rpm/dnf-plugin-subscription-manager@1.26.20-1.el8_2?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"1.26.20-1.el8_2\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"dnf\",\n            \"purl\": \"pkg:rpm/dnf@4.2.17-7.el8_2?arch=noarch\",\n            \"type\": \"library\",\n            \"version\": \"4.2.17-7.el8_2\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"elfutils-default-yama-scope\",\n            \"purl\": \"pkg:rpm/elfutils-default-yama-scope@0.178-7.el8?arch=noarch\",\n            \"type\": \"library\",\n            \"version\": \"0.178-7.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"elfutils-libelf\",\n            \"purl\": \"pkg:rpm/elfutils-libelf@0.178-7.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"0.178-7.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"elfutils-libs\",\n            \"purl\": \"pkg:rpm/elfutils-libs@0.178-7.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"0.178-7.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"expat\",\n            \"purl\": \"pkg:rpm/expat@2.2.5-3.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"2.2.5-3.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"file-libs\",\n            \"purl\": \"pkg:rpm/file-libs@5.33-13.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"5.33-13.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"filesystem\",\n            \"purl\": \"pkg:rpm/filesystem@3.8-2.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"3.8-2.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"findutils\",\n            \"purl\": \"pkg:rpm/findutils@4.6.0-20.el8?arch=ppc64le\u0026epoch=1\",\n            \"type\": \"library\",\n            \"version\": \"4.6.0-20.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"gawk\",\n            \"purl\": \"pkg:rpm/gawk@4.2.1-1.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"4.2.1-1.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"gdb-gdbserver\",\n            \"purl\": \"pkg:rpm/gdb-gdbserver@8.2-11.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"8.2-11.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"gdbm-libs\",\n            \"purl\": \"pkg:rpm/gdbm-libs@1.18-1.el8?arch=ppc64le\u0026epoch=1\",\n            \"type\": \"library\",\n            \"version\": \"1.18-1.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"gdbm\",\n            \"purl\": \"pkg:rpm/gdbm@1.18-1.el8?arch=ppc64le\u0026epoch=1\",\n            \"type\": \"library\",\n            \"version\": \"1.18-1.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"glib2\",\n            \"purl\": \"pkg:rpm/glib2@2.56.4-8.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"2.56.4-8.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"glibc-common\",\n            \"purl\": \"pkg:rpm/glibc-common@2.28-101.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"2.28-101.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"glibc-minimal-langpack\",\n            \"purl\": \"pkg:rpm/glibc-minimal-langpack@2.28-101.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"2.28-101.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"glibc\",\n            \"purl\": \"pkg:rpm/glibc@2.28-101.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"2.28-101.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"gmp\",\n            \"purl\": \"pkg:rpm/gmp@6.1.2-10.el8?arch=ppc64le\u0026epoch=1\",\n            \"type\": \"library\",\n            \"version\": \"6.1.2-10.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"gnupg2\",\n            \"purl\": \"pkg:rpm/gnupg2@2.2.9-1.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"2.2.9-1.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"gnutls\",\n            \"purl\": \"pkg:rpm/gnutls@3.6.8-11.el8_2?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"3.6.8-11.el8_2\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"gobject-introspection\",\n            \"purl\": \"pkg:rpm/gobject-introspection@1.56.1-1.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"1.56.1-1.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"gpgme\",\n            \"purl\": \"pkg:rpm/gpgme@1.10.0-6.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"1.10.0-6.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"grep\",\n            \"purl\": \"pkg:rpm/grep@3.1-6.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"3.1-6.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"gzip\",\n            \"purl\": \"pkg:rpm/gzip@1.9-9.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"1.9-9.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"ima-evm-utils\",\n            \"purl\": \"pkg:rpm/ima-evm-utils@1.1-5.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"1.1-5.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"info\",\n            \"purl\": \"pkg:rpm/info@6.5-6.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"6.5-6.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"iptables-libs\",\n            \"purl\": \"pkg:rpm/iptables-libs@1.8.4-10.el8_2.1?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"1.8.4-10.el8_2.1\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"json-c\",\n            \"purl\": \"pkg:rpm/json-c@0.13.1-0.2.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"0.13.1-0.2.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"json-glib\",\n            \"purl\": \"pkg:rpm/json-glib@1.4.4-1.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"1.4.4-1.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"keyutils-libs\",\n            \"purl\": \"pkg:rpm/keyutils-libs@1.5.10-6.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"1.5.10-6.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"kmod-libs\",\n            \"purl\": \"pkg:rpm/kmod-libs@25-16.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"25-16.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"krb5-libs\",\n            \"purl\": \"pkg:rpm/krb5-libs@1.17-18.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"1.17-18.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"langpacks-en\",\n            \"purl\": \"pkg:rpm/langpacks-en@1.0-12.el8?arch=noarch\",\n            \"type\": \"library\",\n            \"version\": \"1.0-12.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libacl\",\n            \"purl\": \"pkg:rpm/libacl@2.2.53-1.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"2.2.53-1.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libarchive\",\n            \"purl\": \"pkg:rpm/libarchive@3.3.2-8.el8_1?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"3.3.2-8.el8_1\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libassuan\",\n            \"purl\": \"pkg:rpm/libassuan@2.5.1-3.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"2.5.1-3.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libattr\",\n            \"purl\": \"pkg:rpm/libattr@2.4.48-3.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"2.4.48-3.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libblkid\",\n            \"purl\": \"pkg:rpm/libblkid@2.32.1-22.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"2.32.1-22.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libcap-ng\",\n            \"purl\": \"pkg:rpm/libcap-ng@0.7.9-5.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"0.7.9-5.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libcap\",\n            \"purl\": \"pkg:rpm/libcap@2.26-3.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"2.26-3.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libcom_err\",\n            \"purl\": \"pkg:rpm/libcom_err@1.45.4-3.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"1.45.4-3.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libcomps\",\n            \"purl\": \"pkg:rpm/libcomps@0.1.11-4.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"0.1.11-4.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libcurl\",\n            \"purl\": \"pkg:rpm/libcurl@7.61.1-12.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"7.61.1-12.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libdb-utils\",\n            \"purl\": \"pkg:rpm/libdb-utils@5.3.28-37.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"5.3.28-37.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libdb\",\n            \"purl\": \"pkg:rpm/libdb@5.3.28-37.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"5.3.28-37.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libdnf\",\n            \"purl\": \"pkg:rpm/libdnf@0.39.1-6.el8_2?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"0.39.1-6.el8_2\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libfdisk\",\n            \"purl\": \"pkg:rpm/libfdisk@2.32.1-22.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"2.32.1-22.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libffi\",\n            \"purl\": \"pkg:rpm/libffi@3.1-21.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"3.1-21.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libgcc\",\n            \"purl\": \"pkg:rpm/libgcc@8.3.1-5.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"8.3.1-5.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libgcrypt\",\n            \"purl\": \"pkg:rpm/libgcrypt@1.8.3-4.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"1.8.3-4.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libgpg-error\",\n            \"purl\": \"pkg:rpm/libgpg-error@1.31-1.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"1.31-1.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libidn2\",\n            \"purl\": \"pkg:rpm/libidn2@2.2.0-1.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"2.2.0-1.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libksba\",\n            \"purl\": \"pkg:rpm/libksba@1.3.5-7.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"1.3.5-7.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libmetalink\",\n            \"purl\": \"pkg:rpm/libmetalink@0.1.3-7.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"0.1.3-7.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libmodulemd1\",\n            \"purl\": \"pkg:rpm/libmodulemd1@1.8.16-0.2.8.2.1?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"1.8.16-0.2.8.2.1\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libmount\",\n            \"purl\": \"pkg:rpm/libmount@2.32.1-22.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"2.32.1-22.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libnghttp2\",\n            \"purl\": \"pkg:rpm/libnghttp2@1.33.0-3.el8_2.1?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"1.33.0-3.el8_2.1\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libnl3\",\n            \"purl\": \"pkg:rpm/libnl3@3.5.0-1.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"3.5.0-1.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libnsl2\",\n            \"purl\": \"pkg:rpm/libnsl2@1.2.0-2.20180605git4a062cf.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"1.2.0-2.20180605git4a062cf.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libpcap\",\n            \"purl\": \"pkg:rpm/libpcap@1.9.0-3.el8?arch=ppc64le\u0026epoch=14\",\n            \"type\": \"library\",\n            \"version\": \"1.9.0-3.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libpsl\",\n            \"purl\": \"pkg:rpm/libpsl@0.20.2-5.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"0.20.2-5.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libpwquality\",\n            \"purl\": \"pkg:rpm/libpwquality@1.4.0-9.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"1.4.0-9.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"librepo\",\n            \"purl\": \"pkg:rpm/librepo@1.11.0-3.el8_2?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"1.11.0-3.el8_2\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libreport-filesystem\",\n            \"purl\": \"pkg:rpm/libreport-filesystem@2.9.5-10.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"2.9.5-10.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"librhsm\",\n            \"purl\": \"pkg:rpm/librhsm@0.0.3-3.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"0.0.3-3.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"librtas\",\n            \"purl\": \"pkg:rpm/librtas@2.0.2-1.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"2.0.2-1.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libseccomp\",\n            \"purl\": \"pkg:rpm/libseccomp@2.4.1-1.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"2.4.1-1.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libselinux\",\n            \"purl\": \"pkg:rpm/libselinux@2.9-3.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"2.9-3.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libsemanage\",\n            \"purl\": \"pkg:rpm/libsemanage@2.9-2.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"2.9-2.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libsepol\",\n            \"purl\": \"pkg:rpm/libsepol@2.9-1.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"2.9-1.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libsigsegv\",\n            \"purl\": \"pkg:rpm/libsigsegv@2.11-5.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"2.11-5.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libsmartcols\",\n            \"purl\": \"pkg:rpm/libsmartcols@2.32.1-22.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"2.32.1-22.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libsolv\",\n            \"purl\": \"pkg:rpm/libsolv@0.7.7-1.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"0.7.7-1.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libssh-config\",\n            \"purl\": \"pkg:rpm/libssh-config@0.9.0-4.el8?arch=noarch\",\n            \"type\": \"library\",\n            \"version\": \"0.9.0-4.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libssh\",\n            \"purl\": \"pkg:rpm/libssh@0.9.0-4.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"0.9.0-4.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libstdc++\",\n            \"purl\": \"pkg:rpm/libstdc++@8.3.1-5.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"8.3.1-5.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libtasn1\",\n            \"purl\": \"pkg:rpm/libtasn1@4.13-3.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"4.13-3.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libtirpc\",\n            \"purl\": \"pkg:rpm/libtirpc@1.1.4-4.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"1.1.4-4.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libunistring\",\n            \"purl\": \"pkg:rpm/libunistring@0.9.9-3.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"0.9.9-3.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libusbx\",\n            \"purl\": \"pkg:rpm/libusbx@1.0.22-1.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"1.0.22-1.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libuser\",\n            \"purl\": \"pkg:rpm/libuser@0.62-23.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"0.62-23.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libutempter\",\n            \"purl\": \"pkg:rpm/libutempter@1.1.6-14.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"1.1.6-14.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libuuid\",\n            \"purl\": \"pkg:rpm/libuuid@2.32.1-22.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"2.32.1-22.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libverto\",\n            \"purl\": \"pkg:rpm/libverto@0.3.0-5.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"0.3.0-5.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libxcrypt\",\n            \"purl\": \"pkg:rpm/libxcrypt@4.1.1-4.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"4.1.1-4.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libxml2\",\n            \"purl\": \"pkg:rpm/libxml2@2.9.7-7.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"2.9.7-7.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libyaml\",\n            \"purl\": \"pkg:rpm/libyaml@0.1.7-5.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"0.1.7-5.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"libzstd\",\n            \"purl\": \"pkg:rpm/libzstd@1.4.2-2.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"1.4.2-2.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"lua-libs\",\n            \"purl\": \"pkg:rpm/lua-libs@5.3.4-11.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"5.3.4-11.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"lz4-libs\",\n            \"purl\": \"pkg:rpm/lz4-libs@1.8.1.2-4.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"1.8.1.2-4.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"mpfr\",\n            \"purl\": \"pkg:rpm/mpfr@3.1.6-1.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"3.1.6-1.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"ncurses-base\",\n            \"purl\": \"pkg:rpm/ncurses-base@6.1-7.20180224.el8?arch=noarch\",\n            \"type\": \"library\",\n            \"version\": \"6.1-7.20180224.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"ncurses-libs\",\n            \"purl\": \"pkg:rpm/ncurses-libs@6.1-7.20180224.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"6.1-7.20180224.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"nettle\",\n            \"purl\": \"pkg:rpm/nettle@3.4.1-1.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"3.4.1-1.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"npth\",\n            \"purl\": \"pkg:rpm/npth@1.5-4.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"1.5-4.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"openldap\",\n            \"purl\": \"pkg:rpm/openldap@2.4.46-11.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"2.4.46-11.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"openssl-libs\",\n            \"purl\": \"pkg:rpm/openssl-libs@1.1.1c-15.el8?arch=ppc64le\u0026epoch=1\",\n            \"type\": \"library\",\n            \"version\": \"1.1.1c-15.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"p11-kit-trust\",\n            \"purl\": \"pkg:rpm/p11-kit-trust@0.23.14-5.el8_0?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"0.23.14-5.el8_0\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"p11-kit\",\n            \"purl\": \"pkg:rpm/p11-kit@0.23.14-5.el8_0?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"0.23.14-5.el8_0\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"pam\",\n            \"purl\": \"pkg:rpm/pam@1.3.1-8.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"1.3.1-8.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"passwd\",\n            \"purl\": \"pkg:rpm/passwd@0.80-3.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"0.80-3.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"pcre2\",\n            \"purl\": \"pkg:rpm/pcre2@10.32-1.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"10.32-1.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"pcre\",\n            \"purl\": \"pkg:rpm/pcre@8.42-4.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"8.42-4.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"platform-python-setuptools\",\n            \"purl\": \"pkg:rpm/platform-python-setuptools@39.2.0-5.el8?arch=noarch\",\n            \"type\": \"library\",\n            \"version\": \"39.2.0-5.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"platform-python\",\n            \"purl\": \"pkg:rpm/platform-python@3.6.8-23.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"3.6.8-23.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"popt\",\n            \"purl\": \"pkg:rpm/popt@1.16-14.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"1.16-14.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"publicsuffix-list-dafsa\",\n            \"purl\": \"pkg:rpm/publicsuffix-list-dafsa@20180723-1.el8?arch=noarch\",\n            \"type\": \"library\",\n            \"version\": \"20180723-1.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"python3-dateutil\",\n            \"purl\": \"pkg:rpm/python3-dateutil@2.6.1-6.el8?arch=noarch\u0026epoch=1\",\n            \"type\": \"library\",\n            \"version\": \"2.6.1-6.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"python3-dbus\",\n            \"purl\": \"pkg:rpm/python3-dbus@1.2.4-15.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"1.2.4-15.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"python3-decorator\",\n            \"purl\": \"pkg:rpm/python3-decorator@4.2.1-2.el8?arch=noarch\",\n            \"type\": \"library\",\n            \"version\": \"4.2.1-2.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"python3-dnf-plugins-core\",\n            \"purl\": \"pkg:rpm/python3-dnf-plugins-core@4.0.12-4.el8_2?arch=noarch\",\n            \"type\": \"library\",\n            \"version\": \"4.0.12-4.el8_2\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"python3-dnf\",\n            \"purl\": \"pkg:rpm/python3-dnf@4.2.17-7.el8_2?arch=noarch\",\n            \"type\": \"library\",\n            \"version\": \"4.2.17-7.el8_2\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"python3-ethtool\",\n            \"purl\": \"pkg:rpm/python3-ethtool@0.14-3.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"0.14-3.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"python3-gobject-base\",\n            \"purl\": \"pkg:rpm/python3-gobject-base@3.28.3-1.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"3.28.3-1.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"python3-gpg\",\n            \"purl\": \"pkg:rpm/python3-gpg@1.10.0-6.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"1.10.0-6.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"python3-hawkey\",\n            \"purl\": \"pkg:rpm/python3-hawkey@0.39.1-6.el8_2?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"0.39.1-6.el8_2\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"python3-iniparse\",\n            \"purl\": \"pkg:rpm/python3-iniparse@0.4-31.el8?arch=noarch\",\n            \"type\": \"library\",\n            \"version\": \"0.4-31.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"python3-inotify\",\n            \"purl\": \"pkg:rpm/python3-inotify@0.9.6-13.el8?arch=noarch\",\n            \"type\": \"library\",\n            \"version\": \"0.9.6-13.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"python3-libcomps\",\n            \"purl\": \"pkg:rpm/python3-libcomps@0.1.11-4.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"0.1.11-4.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"python3-libdnf\",\n            \"purl\": \"pkg:rpm/python3-libdnf@0.39.1-6.el8_2?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"0.39.1-6.el8_2\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"python3-librepo\",\n            \"purl\": \"pkg:rpm/python3-librepo@1.11.0-3.el8_2?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"1.11.0-3.el8_2\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"python3-libs\",\n            \"purl\": \"pkg:rpm/python3-libs@3.6.8-23.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"3.6.8-23.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"python3-pip-wheel\",\n            \"purl\": \"pkg:rpm/python3-pip-wheel@9.0.3-16.el8?arch=noarch\",\n            \"type\": \"library\",\n            \"version\": \"9.0.3-16.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"python3-rpm\",\n            \"purl\": \"pkg:rpm/python3-rpm@4.14.2-37.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"4.14.2-37.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"python3-setuptools-wheel\",\n            \"purl\": \"pkg:rpm/python3-setuptools-wheel@39.2.0-5.el8?arch=noarch\",\n            \"type\": \"library\",\n            \"version\": \"39.2.0-5.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"python3-six\",\n            \"purl\": \"pkg:rpm/python3-six@1.11.0-8.el8?arch=noarch\",\n            \"type\": \"library\",\n            \"version\": \"1.11.0-8.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"python3-subscription-manager-rhsm\",\n            \"purl\": \"pkg:rpm/python3-subscription-manager-rhsm@1.26.20-1.el8_2?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"1.26.20-1.el8_2\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"python3-syspurpose\",\n            \"purl\": \"pkg:rpm/python3-syspurpose@1.26.20-1.el8_2?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"1.26.20-1.el8_2\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"readline\",\n            \"purl\": \"pkg:rpm/readline@7.0-10.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"7.0-10.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"redhat-release\",\n            \"purl\": \"pkg:rpm/redhat-release@8.2-1.0.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"8.2-1.0.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"rootfiles\",\n            \"purl\": \"pkg:rpm/rootfiles@8.1-22.el8?arch=noarch\",\n            \"type\": \"library\",\n            \"version\": \"8.1-22.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"rpm-build-libs\",\n            \"purl\": \"pkg:rpm/rpm-build-libs@4.14.2-37.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"4.14.2-37.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"rpm-libs\",\n            \"purl\": \"pkg:rpm/rpm-libs@4.14.2-37.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"4.14.2-37.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"rpm\",\n            \"purl\": \"pkg:rpm/rpm@4.14.2-37.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"4.14.2-37.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"sed\",\n            \"purl\": \"pkg:rpm/sed@4.5-1.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"4.5-1.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"setup\",\n            \"purl\": \"pkg:rpm/setup@2.12.2-5.el8?arch=noarch\",\n            \"type\": \"library\",\n            \"version\": \"2.12.2-5.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"shadow-utils\",\n            \"purl\": \"pkg:rpm/shadow-utils@4.6-8.el8?arch=ppc64le\u0026epoch=2\",\n            \"type\": \"library\",\n            \"version\": \"4.6-8.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"sqlite-libs\",\n            \"purl\": \"pkg:rpm/sqlite-libs@3.26.0-6.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"3.26.0-6.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"subscription-manager-rhsm-certificates\",\n            \"purl\": \"pkg:rpm/subscription-manager-rhsm-certificates@1.26.20-1.el8_2?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"1.26.20-1.el8_2\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"subscription-manager\",\n            \"purl\": \"pkg:rpm/subscription-manager@1.26.20-1.el8_2?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"1.26.20-1.el8_2\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"systemd-libs\",\n            \"purl\": \"pkg:rpm/systemd-libs@239-31.el8_2.2?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"239-31.el8_2.2\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"systemd-pam\",\n            \"purl\": \"pkg:rpm/systemd-pam@239-31.el8_2.2?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"239-31.el8_2.2\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"systemd\",\n            \"purl\": \"pkg:rpm/systemd@239-31.el8_2.2?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"239-31.el8_2.2\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"tar\",\n            \"purl\": \"pkg:rpm/tar@1.30-4.el8?arch=ppc64le\u0026epoch=2\",\n            \"type\": \"library\",\n            \"version\": \"1.30-4.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"tzdata\",\n            \"purl\": \"pkg:rpm/tzdata@2020a-1.el8?arch=noarch\",\n            \"type\": \"library\",\n            \"version\": \"2020a-1.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"usermode\",\n            \"purl\": \"pkg:rpm/usermode@1.113-1.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"1.113-1.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"util-linux\",\n            \"purl\": \"pkg:rpm/util-linux@2.32.1-22.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"2.32.1-22.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"vim-minimal\",\n            \"purl\": \"pkg:rpm/vim-minimal@8.0.1763-13.el8?arch=ppc64le\u0026epoch=2\",\n            \"type\": \"library\",\n            \"version\": \"8.0.1763-13.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"virt-what\",\n            \"purl\": \"pkg:rpm/virt-what@1.18-6.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"1.18-6.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"which\",\n            \"purl\": \"pkg:rpm/which@2.21-12.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"2.21-12.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"xz-libs\",\n            \"purl\": \"pkg:rpm/xz-libs@5.2.4-3.el8?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"5.2.4-3.el8\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"yum\",\n            \"purl\": \"pkg:rpm/yum@4.2.17-7.el8_2?arch=noarch\",\n            \"type\": \"library\",\n            \"version\": \"4.2.17-7.el8_2\"\n        },\n        {\n            \"build_dependency\": false,\n            \"name\": \"zlib\",\n            \"purl\": \"pkg:rpm/zlib@1.2.11-16.el8_2?arch=ppc64le\",\n            \"type\": \"library\",\n            \"version\": \"1.2.11-16.el8_2\"\n        }\n    ],\n    \"incompleteness_reasons\": [\n        {\n            \"description\": \"parent build 'osbs-test-sandwich-container-1.0.rhel8.layered.pinned-2' is missing SBOM\",\n            \"type\": \"other\"\n        }\n    ],\n    \"specVersion\": \"1.4\",\n    \"version\": 1\n}","Timestamp":"2023-08-02T06:36:51Z"}}","signatures":[{"keyid":"","sig":"MEUCIQDyjdg692M8npLusuKP1GDLLH1ZTvYAB3FwAkthp0niEgIgQgvlMmR5XxBqJkGkdJJnvLy5vHJIP2RJdl8XxSp0g3c="}]}
